/// <reference path="../../d.ts/DefinitelyTyped/angularjs/angular.d.ts" />
/// <reference path="../../d.ts/DefinitelyTyped/socket.io/socket.io.d.ts" />
/// <reference path="../../d.ts/utype.d.ts" />
/// <reference path="utype/typing_logic.ts" />
/// <reference path="utype/progress_view.ts" />
/// <reference path="utype/lyric_switcher.ts" />
/// <reference path="utype/tm_xml_parser.ts" />

enum GameStatus {
    READY,
    PLAY,
    PAUSE,
    WATCH,
	LOADING
};

var app = angular.module('utype', ['socket.io']);
app.controller('MainController', ['$scope', 'socket', function($scope, socket: Socket) {

	// --- $scope ---
	$scope.entryForm = {
		userName: '',
		iconId: 0
	};
	$scope.lyric = null;
	$scope.gameStatus = GameStatus.LOADING;
	$scope.entryClients = {};
	$scope.myClientId = '!!! invalid client id';
	$scope.clientScores = {};

	$scope.getClientScore = (clientId: string): ClientScore => {
		return $scope.clientScores[clientId];
	}

	$scope.getMyClientScore = (): ClientScore => {
		return $scope.getClientScore($scope.myClientId);
	}

	$scope.isWatchStatus = (): boolean => {
		return $scope.gameStatus === GameStatus.WATCH;
	}

	$scope.changeStatus = (newStatus: GameStatus) => {
		$scope.gameStatus = newStatus;
	}

	$scope.entryGame = () => {
		socket.emit('entry', $scope.entryForm);
		$scope.changeStatus(GameStatus.READY);
	}

	$scope.startGame = () => {
		socket.emit('start');
		_startGame();
	}

    /**
     * 歌詞を表示する
     */
    $scope.setLyric = (lyric: utype.Lyric) => {
		_typing.registerSubject(lyric.kanaLyric);
        _intervalProgressBar.setPercentage(0);
        _intervalProgressBar.startAnimation(100, lyric.duration);
	    for (var id in $scope.clientScores) {
		    $scope.clientScores[id].intervalScore = {
			    kanaSolvedCount: 0,
			    solvedRoma: '',
			    unsolvedRoma: _typing.getUnsolvedRoma()
		    };
		}
        $scope.lyric = lyric;
		$scope.$apply();
    }

    /**
     * キーが押されたとき
     */
	$scope.onKeyPress = (keyEvent) => {
        if ($scope.gameStatus === GameStatus.READY && keyEvent.which == 0x20) {
			$scope.startGame();
        }
        else if($scope.gameStatus === GameStatus.PLAY) {
            _typeKey(keyEvent.which);
			socket.emit('type', $scope.getMyClientScore());
        }
    }

	$scope.getClientSolvedKana = (clientId: string): string => {
		var score = $scope.getClientScore(clientId);
		var result = _typing.getKanaSubject().substr(0, score.intervalScore.kanaSolvedCount);
		return _typing.getKanaSubject().substr(0, score.intervalScore.kanaSolvedCount);
	}

	$scope.getClientUnsolvedKana = (clientId: string): string => {
		var score = $scope.getClientScore(clientId);
		return _typing.getKanaSubject().substr(score.intervalScore.kanaSolvedCount);
	}

	$scope.getClientSolvedRoma = (clientId: string): string => {
		return $scope.getClientScore(clientId).intervalScore.solvedRoma;
	}

	$scope.getClientUnsolvedRoma = (clientId: string): string => {
		return $scope.getClientScore(clientId).intervalScore.unsolvedRoma;
	}

	// --- socket ---

	socket.on('entry.accept', (data) => {
		$scope.myClientId = data.clientId;
	});

	socket.on('entry.update', (data: ClientInfoDict) => {
		$scope.entryClients = data;
		// TODO: entryClientsとclientScores2つのリストが必要なのは面倒では？
		for (var id in $scope.entryClients) {
			$scope.clientScores[id] = {
				intervalScore: {
					kanaSolvedCount: 0,
					solvedRoma: '',
					unsolvedRoma: ''
				},
				totalScore: {
					point: 0,
					missCount: 0
				}
			};
		}
		$scope.$apply();
	});

	socket.on('start', (data) => {
		console.log('other client started game.');
		_startGame();
	});

	socket.on('type', (data) => {
		$scope.clientScores[data.clientId] = data.clientScore;
		$scope.$apply();
	});

	// --- private ---
	var _typing = new utype.TypingLogic();

	var _lyricSwitcher = null;

	var _startGame = () => {
		var videoElement = <HTMLMediaElement> document.getElementsByTagName('video')[0];
		videoElement.play();
		$scope.changeStatus(GameStatus.PLAY);
		_lyricSwitcher.onSwitch.addListener((lyric: utype.Lyric) => {
			$scope.setLyric(lyric);
		});
		_lyricSwitcher.onFinish.addListener(() => {
			// TODO: すべての歌詞が終了したとき
		});
		_lyricSwitcher.start();
		_totalProgressBar.startAnimation(100, _lyricSwitcher.getTotalDuration());
	}

    /**
     * 曲全体の進行度を表すプログレスバー
     */
    var _totalProgressBar = new utype.ProgressView('#total-bar');

    /**
     * 現在の歌詞インターバルの進行度を表すプログレスバー
     */
    var _intervalProgressBar = new utype.ProgressView('#interval-bar');

    /**
     * キーをタイプする
     */
    var _typeKey = function(keyCode: number): void {
        var typedChar = String.fromCharCode(keyCode);
        if (_typing.type(typedChar)) {
            _onTypeSuccess();
        }
        else {
            _onTypeMiss();
        }
    }

    var _onTypeSuccess = function(): void {
		// TODO: スコア点数計算式
	    $scope.getMyClientScore().totalScore.point += 100;
	    $scope.getMyClientScore().intervalScore = {
		    kanaSolvedCount: _typing.getKanaSolvedCount(),
		    solvedRoma: _typing.getSolvedRoma(),
		    unsolvedRoma: _typing.getUnsolvedRoma()
		};
		$scope.$apply();
    }

    var _onTypeMiss = function(): void {
		// TODO: ミス計算
	    $scope.getMyClientScore().totalScore.missCount += 1;
		$scope.$apply();
    }

	// loading xml
	utype.TmXmlParser.parse('xml/mondai_kaiketsu.xml', (lyrics: utype.Lyric[]) => {
		_lyricSwitcher = new utype.LyricSwitcher(lyrics);
		$scope.changeStatus(GameStatus.WATCH);
	});
}]);

/**
 * keyPressイベントを受け取るためのディレクティブ
 */
app.directive('ngKeypress', function() {
    return {
        restrict: 'A',
        link: function(scope, elem, attr, ctrl) {
            elem.bind('keypress', function(e) {
                scope[attr['ngKeypress']](e);
            });
        }
    };
});
